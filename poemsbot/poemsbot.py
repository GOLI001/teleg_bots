import libs , math
import keyboards as kb
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile

import asyncio
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

bot_token = 
bot_username = "zolotoivek_bot"

bot = Bot(token=bot_token, parse_mode="HTML")
dp = Dispatcher(bot, storage = MemoryStorage())

#States
class Form(StatesGroup):
    message_id = State()
    confirm = State()
class newPoem(StatesGroup):
    name = State()
    author = State()
    content = State()
    confirm = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    try:
        ref=message.text.split()[1]
        await bot.send_message(ref, "üí∞ “ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑, —Å—ñ–∑–¥—ñ“£ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞-–º–µ–Ω –±—ñ—Ä –∞–¥–∞–º –∫—ñ—Ä–¥—ñ!")
    except IndexError:
        ref = '0' 
    libs.newUser(message.chat.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username, ref)
    keyboard = kb.start_a if libs.isAdmin(message.chat.id) == 1 else kb.start
    await message.answer("üìé –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –∏–º—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n\n<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n</b>""<b>–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π –ó–æ–ª–æ—Ç–æ–≥–æ –≤–µ–∫–∞ü§ó</b>" , reply_markup=keyboard)

# @dp.message_handler(lambda message: message.text == 'üìÑ ”®–ª–µ“£ “±—Å—ã–Ω—É')
# async def process_name(message: types.Message, state: FSMContext):
#     await newPoem.name.set()
#     await message.answer('<b>”®–ª–µ“£ –∞—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:</b>')
@dp.message_handler(state=newPoem.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as npoem:
        npoem['name'] = message.text
    await newPoem.next()
    await message.answer('<b>–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:</b>')
@dp.message_handler(state=newPoem.author)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as npoem:
        npoem['author'] = message.text
    await newPoem.next()
    await message.answer('<b>”®–ª–µ“£–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:</b>')
@dp.message_handler(state=newPoem.content)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as npoem:
        npoem['content'] = message.text
    await newPoem.next()
    await message.answer('<b>{}</b>\n<i>{}</i>\n\n{}'.format(npoem['name'], npoem['author'], npoem['content']), reply_markup=kb.confirmButton)
@dp.callback_query_handler(text_contains='confirm', state=newPoem.confirm)
async def process_callback_kb1btn1(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as npoem:
        await bot.edit_message_text('<b>‚úÖ “∞—Å—ã–Ω—ã–ª–¥—ã</b>', callback_query.from_user.id, callback_query.message.message_id)
        admins = libs.getAdmins()
        for admin in admins:
            try:
                await bot.send_message(admin[0], 'id:{}\n{}\n{}\n{}'.format(callback_query.from_user.id, npoem['name'], npoem['author'], npoem['content']), reply_markup=kb.addPoemButton)
            except:
                pass
            await asyncio.sleep(0.1)
    await state.finish()
@dp.callback_query_handler(lambda c: c.data and c.data == 'cancel', state='*')
async def process_callback_kb1btn1(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text('<b>‚ùå ”®—à—ñ—Ä—ñ–ª–¥—ñ</b>', callback_query.from_user.id, callback_query.message.message_id)
    await state.finish()
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    text = callback_query.message.text.split('\n', 3)
    id = text[0].split(':')[1].strip()
    name = text[1]
    author = text[2]
    content = text[3]
    libs.addPoem(name, author, content)
    await bot.send_message(id, '‚úÖ <b>–°—ñ–∑ “±—Å—ã–Ω“ì–∞–Ω ”©–ª–µ“£ –±–æ—Ç“õ–∞ “õ–æ—Å—ã–ª–¥—ã!</b>')
    await bot.edit_message_text('<b>‚úÖ “ö–æ—Å—ã–ª–¥—ã</b>', callback_query.from_user.id, callback_query.message.message_id)
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.message.text.split('\n', 3)[0].split(':')[1].strip(), '<b>‚ùå–°—ñ–∑ “±—Å—ã–Ω“ì–∞–Ω ”©–ª–µ“£ “õ–æ—Å—ã–ª–º–∞–¥—ã!</b>\n\n–ú“Ø–º–∫—ñ–Ω –±–æ–ª“ì–∞–Ω –∂–∞–π—Ç—Ç–∞—Ä:\n‚Ä¢ ”®–ª–µ“£ –∞—Ç—ã–Ω–¥–∞, –Ω–µ–º–µ—Å–µ –∞–≤—Ç–æ—Ä–¥—ã“£ –∞—Ç—ã-–∂”©–Ω—ñ–Ω–¥–µ “õ–∞—Ç–µ–ª—ñ–∫ –±–∞—Ä\n‚Ä¢ –¢–∞–Ω—ã–º–∞–ª ”©–ª–µ“£ –±–æ—Ç—Ç–∞ –±–∞—Ä\n‚Ä¢ –ê“õ—ã–Ω –µ–º–µ—Å, ”ô–Ω—à—ñ–ª–µ—Ä–¥—ñ“£ ”©–ª–µ“£—ñ–Ω “±—Å—ã–Ω–¥—ã“£—ã–∑\n\n<b>–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å: @maksutovnurda</b>')
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)







@dp.message_handler(lambda message: message.text == '–¢–∞—Ä–∞—Ç—É')
async def process_name(message: types.Message, state: FSMContext):
    if libs.isAdmin(message.chat.id):
        await Form.message_id.set()
        await message.answer('<b>–¢–∞—Ä–∞—Ç—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:</b>')
@dp.message_handler(content_types=['document', 'text', 'photo', 'audio', 'sticker', 'video'],state=Form.message_id)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message_id'] = message.message_id
    await Form.next()
    await message.reply("–ë–∞—Å—Ç–∞—É “Ø—à—ñ–Ω <b>'+++'</b> –∂—ñ–±–µ—Ä—ñ“£—ñ–∑, –Ω–µ–º–µ—Å–µ <b>–∂–∞“£–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:\n\n–¢–æ“õ—Ç–∞—Ç—É “Ø—à—ñ–Ω <b>-</b> –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")
@dp.message_handler(content_types=['document', 'text', 'photo', 'audio', 'sticker', 'video'],state=Form.confirm)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == '+++':
        async with state.proxy() as data:
            users = libs.getUsers()
            count = 0
            await state.finish()
            await message.answer("–¢–∞—Ä–∞—Ç—É –±–∞—Å—Ç–∞–ª–¥—ã, <b>~{} –º–∏–Ω—É—Ç—Ç–∞</b> —Ç–æ–ª—ã“õ –∞—è“õ—Ç–∞–ª–∞–¥—ã".format(round(len(users)/600), 1))
            for user in users:
                try:
                    await bot.copy_message(user[0], message.chat.id, data['message_id'], allow_sending_without_reply=True)
                    count += 1
                except BotBlocked as E:
                    libs.removeUser(user[0])
                except:
                    pass
                await asyncio.sleep(0.1)
            await message.answer("{} –∞–¥–∞–º–Ω–∞–Ω <b>{} –∞–¥–∞–º“ì–∞</b> –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ".format(len(users), count))
            libs.usersVacuum()
    elif message.text == '-':
        await message.answer("<b>–ê—è“õ—Ç–∞–ª–¥—ã</b>")
        await state.finish()
    else:
        async with state.proxy() as data:
            data['message_id'] = message.message_id
        await Form.confirm.set()
        await message.reply("–ë–∞—Å—Ç–∞—É “Ø—à—ñ–Ω <b>'+++'</b> –∂—ñ–±–µ—Ä—ñ“£—ñ–∑, –Ω–µ–º–µ—Å–µ <b>–∂–∞“£–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:\n\n–¢–æ“õ—Ç–∞—Ç—É “Ø—à—ñ–Ω <b>-</b> –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")


@dp.message_handler(commands=['unsubscribe'])
async def process_start_command(message: types.Message):        
    await message.answer('<b>‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!</b>\n\n<i>–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:</i> /subscribe')
@dp.message_handler(commands=['subscribe'])
async def process_start_command(message: types.Message):        
    await message.answer('<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é </b> ü•≥\n–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n\n<i>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏:</fi> /unsubscribe')


@dp.message_handler()
async def echo_message(message: types.Message):
    if message.text.startswith('/o'): 
        answer = libs.getPoem(message.text[2:])
        if len(answer) > 4096:
            for i in range(0, len(answer), 4096):
                if i/4096+1 == math.ceil(len(answer)/4096): # IN LAST ITERATION
                    await message.answer(answer[i:i+4096], reply_markup=kb.getPdfButton(message.text[2:]))
                else:
                    await message.answer(answer[i:i+4096])
                await asyncio.sleep(0.1) # IF MESSAGE NOT LONG THAN 4096 chars
        else:
            await message.answer(answer, reply_markup=kb.getPdfButton(message.text[2:]))
    elif message.text.startswith('/a'):
        query = '-- {}'.format(libs.getAuthor(message.text[2:])[0])
        response = libs.searchPoem(1, query, True)
        await message.answer(response[0], reply_markup=response[1])
    elif message.text.startswith('/d'): 
        if libs.isAdmin(message.chat.id):
            libs.deletePoem(message.text[2:])
            await message.answer("‚úÖ ”®—à—ñ—Ä—ñ–ª–¥—ñ")
    elif message.text == '/contact':
        await message.answer('<i>‚Ä¢ –ë–æ—Ç—Ç–∞–Ω “õ–∞—Ç–µ–ª—ñ–∫ —Ç–∞–ø—Å–∞“£—ã–∑\n‚Ä¢ “∞—Å—ã–Ω—ã—Å—ã“£—ã–∑ –±–æ–ª—Å–∞\n‚Ä¢ ”®–ª–µ“£ “õ–æ—Å“õ—ã“£—ã–∑ –∫–µ–ª—Å–µ</i>\n\n<b>Telegram:</b> @maksutovnurda\n<b>Whatsapp:</b> wa.me/77025475495 (+77025475495)')
    elif message.text == 'üíé –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ':
        poem = libs.getRandomPoem(); keyboard = kb.getPdfButton(poem[0], True)
        await message.answer("<b>{}</b>\n<i>{}</i>\n\n{}\n\n–î—Ä—É–≥–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞: /a{}".format(poem[1], poem[2], poem[3], poem[0]), reply_markup=keyboard)
    elif message.text == 'üìÉ –í—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ':
        response = libs.searchPoem(1, "---")
        await message.answer(response[0], reply_markup=response[1])
    elif message.text == 'üîó –†–µ—Ñ–µ—Ä–∞–ª':
        await message.answer("üîó <b>–°—ñ–∑–¥—ñ“£ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞“£—ã–∑:</b> t.me/{}?start={}\n<i>–û—Å—ã–Ω—ã –±–∞—Å“õ–∞–ª–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä—ñ–ø –±”©–ª—ñ—Å—ñ“£—ñ–∑. –û—Å—ã —Å—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã –±–æ—Ç“õ–∞ “õ–∞–Ω—à–∞ –∞–¥–∞–º “õ–æ—Å“õ–∞–Ω—ã“£—ã–∑–¥—ã –∫”©—Ä–µ –∞–ª–∞—Å—ã–∑!</i>\n\nüìÑ {} {}({}):\nüë®‚Äç‚öïÔ∏è –®–∞“õ—ã—Ä–¥—ã“£—ã–∑: <b>{} –∞–¥–∞–º</b>".format(bot_username, str(message.chat.id), str(message.from_user.first_name), str(message.from_user.last_name), str(message.chat.id), libs.getCountOfReffereds(message.chat.id)))
    elif message.text == 'üë§ –ê–≤—Ç–æ—Ä—ã':
        response = libs.getAuthors(1)
        await message.answer(response[0], reply_markup=response[1])
    elif message.text == '-üìä-':
        if libs.isAdmin(message.chat.id):
            await message.answer(libs.getStats())
    elif message.text == '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
        await message.answer('<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é</b> ü•≥\n–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n\n<i>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏:</i> /unsubscribe')
    else:
        await message.answer('<i>{}</i>'.format(message.text), reply_markup=kb.typeButton)




@dp.callback_query_handler(lambda c: c.data and c.data.startswith('fromauthors'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    response = libs.searchPoem(1, "- "+callback_query.message.text )
    await bot.edit_message_text(response[0], callback_query.from_user.id, callback_query.message.message_id, reply_markup=response[1])

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('frompoems'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    response = libs.searchPoem(1, callback_query.message.text)
    await bot.edit_message_text(response[0], callback_query.from_user.id, callback_query.message.message_id, reply_markup=response[1])

@dp.callback_query_handler(lambda c: c.data and c.data== 'random')
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    poem = libs.getRandomPoem(); keyboard = kb.getPdfButton(poem[0], True)
    await bot.send_message(callback_query.from_user.id, "<b>{}</b>\n<i>{}</i>\n\n{}\n\n–î—Ä—É–≥–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞: /a{}".format(poem[1], poem[2], poem[3], poem[0]), reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('pdf'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    poem_id = callback_query.data.split('|')[1]
    await bot.send_chat_action(callback_query.from_user.id, "upload_document")
    poem = libs.getNativePoem(poem_id)
    file = libs.getPdfOfPoem(callback_query.from_user.id, poem[1], poem[2], poem[3])
    await bot.send_document(callback_query.from_user.id, InputFile('fonts/'+file, poem[1]+'.pdf') )
    libs.deleteFile('fonts/'+file)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('author'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    response = libs.getAuthors(int(callback_query.data.split('|')[1]))
    await bot.edit_message_text(response[0], callback_query.from_user.id, callback_query.message.message_id, reply_markup=response[1])
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('poem'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    response = libs.searchPoem(int(callback_query.data.split('|')[1]), callback_query.message.text)
    await bot.edit_message_text(response[0], callback_query.from_user.id, callback_query.message.message_id, reply_markup=response[1])

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)




